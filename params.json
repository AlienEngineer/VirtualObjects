{"name":"Virtual Objects","tagline":"Virtual Objects","body":"### Menu\r\n* [Getting Started] (#getting-started)\r\n* [Crud Operations] (#crud-operations)\r\n* [Linq Support] (#linq-support)\r\n* [Data Type Mappings] (#data-type-mappings)\r\n* [Support or Contact] (#support-or-contact)\r\n\r\n***\r\n\r\n### Getting Started\r\n\r\n#### Create a Model\r\n```C#\r\npublic class Employee \r\n{\r\n    public String EmployeeId { get; set; }\r\n    public String LastName { get; set; }\r\n    // Other fields ...\r\n}\r\n```\r\n\r\n#### Config the Connection\r\n```XML\r\n  <connectionStrings>\r\n    <clear/>\r\n    <add name=\"YourMachineName\" \r\n         providerName=\"System.Data.SqlClient\" \r\n         connectionString=\"\r\n               Data Source=.\\instance;\r\n               Initial Catalog=db;\r\n               Integrated Security=true\"/>\r\n  </connectionStrings>\r\n```\r\n\r\n\r\n#### Use it!\r\n```C#\r\n   using (var session = new Session())\r\n   {\r\n      IQueryable<Employee> employees = session.GetAll<Employee>()\r\n        .Where(e => e.BirthDate.Year > 1983);\r\n      \r\n      session.Insert(new Employee \r\n      {\r\n         Name = \"I'm the new guy!\"\r\n      });\r\n   }\r\n```\r\n\r\n### Crud Operations\r\n\r\n```C#\r\n   // Create\r\n   Employee Sergio = session.Insert(new Employee \r\n   {\r\n      FirstName = \"Sérgio\",\r\n      LastName = \"Ferreira\",\r\n      BirthDate = new DateTime(1983, 4, 16)\r\n   });   \r\n\r\n   // Read\r\n   Employee employee = session.GetById(Employee { EmployeeId = 1 });\r\n\r\n   // Update\r\n   session.Update(employee);\r\n\r\n   // Delete\r\n   session.Delete(employee);\r\n```\r\n\r\n***\r\n\r\n### Linq Support\r\n\r\n```C#\r\n    IQueryable<T> query = Session.GetAll<T>();\r\n    // Or\r\n    IQueryable<T> query = Session.Query<T>();\r\n```\r\n\r\nAll queries can be verified under \"VirtualObjects.Tests.Queries\" namespace.\r\n\r\n#### IQueryable Methods Supported\r\n* Where\r\n* First, FirstOrDefault, Single, SingleOrDefault, Last, LastOrDefault\r\n* Count, LongCount\r\n* Distinct\r\n* GroupBy\r\n* Sum, Min, Max, Average\r\n* Any\r\n* Contains\r\n* Join and GroupJoin\r\n* Union\r\n* Select\r\n* OrderBy, OrderByDescending and ThenBy\r\n* Take and Skip\r\n\r\n#### Supported Projections\r\n\r\n```C#\r\n    // On group joins (full entities and collection load)\r\n    from o in Query<Orders>()\r\n    join od in Query<OrderDetails>() on o equals od.Order into ods\r\n    select new { Order = o, Details = ods }\r\n    \r\n    // On Joins (full entities load)\r\n    from o in Query<Orders>()\r\n    join od in Query<OrderDetails>() on o equals od.Order\r\n    join e in Query<Employee>() on o.Employee equals e\r\n    select new { Order = o, Detail = od, Employee = e }\r\n\r\n    // Specific members projection\r\n    from o in Query<Orders>()\r\n    join od in Query<OrderDetails>() on o.Freight equals od.UnitPrice\r\n    select new { o.OrderId, od.UnitPrice, o.ShipCity }\r\n\r\n    Query<Employee>().Select(e => new { e.EmployeeId, e.LastName, e.FirstName })\r\n\r\n    // Agregated Projection\r\n    Query<Employee>().GroupBy(e => e.City)\r\n    .Select(e => new\r\n    {\r\n        City = e.Key, \r\n        Min = e.Min(o => o.EmployeeId),\r\n        Max = e.Max(o => o.EmployeeId),\r\n        Sum = e.Sum(o => o.EmployeeId),\r\n        Count = e.Count(),\r\n        Average = e.Average(o => o.EmployeeId)\r\n    })\r\n\r\n    // Calculated Projection\r\n    Query<Employee>().GroupBy(e => e.City)\r\n    .Select(e => new\r\n    {\r\n        Average = e.Sum(o => o.EmployeeId) / (e.Count()*1.0) * 100.0\r\n    })\r\n    \r\n```\r\n\r\n#### Supported Predicates\r\n\r\n\r\n\r\n***\r\n\r\n### Data Type Mappings\r\nCheckout the microsoft table at [ADO.Net](http://msdn.microsoft.com/en-us/library/cc716729.aspx)\r\n\r\n***\r\n\r\n### Support or Contact\r\nIf you have any suggestions for this project or something is not working right please contact me at Alien.Software.Engineer@gmail.com or @AlienEngineer (github)\r\n\r\n### For more info click [here] (http://alienengineer.github.com/VirtualObjects/)\r\n### Get it as a NuGet Package [here] (http://www.nuget.org/packages/VirtualObjects/)\r\n```\r\n   PM> Install-Package VirtualObjects -Pre\r\n```\r\n\r\n### Dependencies\r\n* Castle.Core       (≥ 3.2.2)\r\n* fasterflect       (≥ 2.1.3)\r\n* Ninject           (≥ 3.0.1.10)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}