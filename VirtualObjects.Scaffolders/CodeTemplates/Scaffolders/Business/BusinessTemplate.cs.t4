<#@ Template Language="C#" HostSpecific="True" Inherits="DynamicTransform" #>
<#@ Output Extension="cs" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

<#
	if (!String.IsNullOrEmpty(Model.BusinessFolder))
    {
		this.Write("namespace " + Model.Namespace + "." + Model.BusinessFolder.Replace("\\","."));
    }
	else 
	{
		this.Write("namespace " + Model.Namespace);
    }
	this.WriteLine("");
#>
{ 
    public interface IBusiness<T> where T : class, new()
    {
        Boolean Exists(T model);
        T GetById(T model);
        Boolean Update(T model);
        T Insert(T model);
        IQueryable<T> GetAll();
    }

	abstract class BusinessModule<T> : IBusiness<T> where T : class, new()
    {
        private readonly IRepository _repository;

        protected BusinessModule(IRepository repository)
        {
            _repository = repository;
        }

        public IRepository Repository { get { return _repository; } }

        #region IBusinessCommon<T> Members

        public virtual T GetById(T model)
        {
            return _repository.GetById(model);
        }

        public virtual Boolean Exists(T model)
        {
            return _repository.Exists(model);
        }

        public virtual Boolean Update(T model)
        {
            return _repository.Update(model) != null;
        }

        public virtual T Insert(T model)
        {
            return _repository.Insert(model);
        }

        public virtual IQueryable<T> GetAll()
        {
            return _repository.GetAll<T>();
        }

        #endregion
    }
}