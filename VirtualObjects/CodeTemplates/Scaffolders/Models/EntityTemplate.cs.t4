<#@ template debug="true" hostSpecific="true" inherits="DynamicTransform" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Linq" #>
using System;
<#
	if (Model.DefaultAttributes) 
	{
		this.WriteLine("using VirtualObjects.Mappings;");
    }
	if (!String.IsNullOrEmpty(Model.ModelFolder))
    {
		this.Write("namespace " + Model.Namespace + "." + Model.ModelFolder.Replace("\\","."));
    }
	else 
	{
		this.Write("namespace " + Model.Namespace);
    }
#>
{
	#pragma warning disable 1591
<#
{		
	if (Model.ForceAnnotations || Model.Table.Name.Contains(" ") || Model.Table.Name != Model.Table.NameSingularized) {
		this.Write("	[Table(TableName=\"" + Model.Table.Name + "\")]");
	}		
}
#>
	public class <#= Model.Table.NameSingularized.Replace(" ", "") #>
	{
<# 
		var table = Model.Table;
		var isKey = false;
		this.PushIndent("		");

		foreach(var column in table.Columns)
		{
			this.WriteLine("");
			if (column.Identity) {
				//
				// In case is an Identity field
				//
				if (Model.ForceAnnotations || column.Name.Contains(" ")) 
					this.Write("[Identity(FieldName=\"" + column.Name + "\")]");
				else 
					this.Write("[Identity]");

				this.WriteLine("");
				isKey = true;
			}
			else if (column.InPrimaryKey) {
				//
				// In case is a key field
				//
				if (Model.ForceAnnotations || column.Name.Contains(" ")) 
					this.Write("[Key(FieldName=\"" + column.Name + "\")]");
				else 
					this.Write("[Key]");

				this.WriteLine("");
				isKey = true;
            }
			else if (Model.ForceAnnotations || column.Name.Contains(" ")) {
				//
				// In case is a simple field with spaces in the name.
				//
				this.Write("[Column(FieldName=\"" + column.Name + "\")]");
				this.WriteLine("");
			}


			if ( column.IsForeignKey && !Model.NoLazyLoad && column.ForeignKeys.Count == 1 )
			{
				foreach ( var foreignColumn in column.ForeignKeys )
                {
					if (!isKey) {
						this.WriteLine("");
					}
						
					this.Write("[Association(FieldName=\"" + column.Name + "\", OtherKey = \"" + foreignColumn.ReferencedColumnName + "\")]");
					this.WriteLine("");

					this.Write("public " );	
					this.Write("virtual " );	
					this.Write(foreignColumn.ReferencedTableName.Replace(" ", ""));
					this.Write(" " );	
					this.Write(column.Name.Replace(" ", ""));
				}
            }
			else 
			{
				//
				// Datatype mapping based on:  http://msdn.microsoft.com/en-us/library/cc716729.aspx
				//
				this.Write("public " );
				switch ((int)column.DataType) 
				{
					case 36: // uniqueidentifier
						this.Write("Guid");
						break;

					case 104: // bit
						this.Write("Boolean");
						break;

					case 62:  // float
						this.Write("Double");
						break;

					case 106: // decimal
					case 108: // numeric
					case 122: // smallmoney
					case 60:  // money
						this.Write("Decimal");
						break;

					case 59:  // real
						this.Write("Single");
						break;

					case 189: // timestamp
					case 173: // binary
					case 34:  // image
					case 165: // varbinary
						this.Write("Byte[]");
						break;

					case 98:  // sql_variant
						this.Write("Object *");
						break;

					case 241:  // xml
						this.Write("XML");
						break;

					case 41:  // time
						this.Write("TimeSpan");
						break;

					case 40:  // date					
					case 42:  // datetime2					
					case 58:  // smalldatetime
					case 61:  // datetime
						this.Write("DateTime");
						break;

					case 43:  // datetimeoffset
						this.Write("DateTimeOffset");
						break;

					case 48:  // tinyint
						this.Write("Byte");
						break;

					case 52:  // smallint
						this.Write("Int16");
						break;
					
					case 127:  // bigint
						this.Write("Int64");
						break;
					
					case 56:  // int
						this.Write("Int32");
						break;
					
					case 175: // char
					case 231: // nvarchar
					case 35:  // text
					case 99:  // ntext
					case 167: // varchar
					case 239: // nchar
						this.Write("String");
						break;

					default: 
						this.Write(column.DataType.ToString());
						break;
				}

				this.Write(" ");
				this.Write(column.Name.Replace(" ", ""));
            }
			
			this.Write(" { get; set; }");
		}
		this.PopIndent();
		this.WriteLine("    ");
#>
	}	
	#pragma warning restore 1591
}