<#@ template debug="true" hostSpecific="true" inherits="DynamicTransform" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Linq" #>

using System;
<#

	if (Model.DefaultAttributes) 
	{
		this.WriteLine("using VirtualObjects.Mappings;");
    }
	else 
	{
		this.WriteLine("using " + Model.Namespace + "." + Model.AnnotationsFolder.Replace("\\",".") + ";");
    }

	this.WriteLine("");

	if (!String.IsNullOrEmpty(Model.ModelFolder))
    {
		this.Write("namespace " + Model.Namespace + "." + Model.ModelFolder.Replace("\\","."));
    }
	else 
	{
		this.Write("namespace " + Model.Namespace);
    }
	this.WriteLine("");
#>
{
	#pragma warning disable 1591
<#
{	
				
	if (Model.ForceAnnotations || Model.Table.Name.Contains(" ") || Model.Table.Name != Model.Table.NameSingularized) {
		this.Write("	[Table(TableName=\"" + Model.Table.Name + "\")]");
		this.WriteLine("");
	}		
}
#>
	public class <#= Model.Table.NameSingularized.Replace(" ", "") #>
	{
	
<# 
		var table = Model.Table;
		var isKey = false;
		this.PushIndent("		");

		foreach(var column in table.Columns)
		{

			if (column.Identity) {
				//
				// In case is an Identity field
				//
				if (Model.ForceAnnotations || column.Name.Contains(" ")) 
					this.Write("[Identity(FieldName=\"" + column.Name + "\")]");
				else 
					this.Write("[Identity]");

				this.WriteLine("");
				isKey = true;
			}
			else if (column.InPrimaryKey) {
				//
				// In case is a key field
				//
				if (Model.ForceAnnotations || column.Name.Contains(" ")) 
					this.Write("[Key(FieldName=\"" + column.Name + "\")]");
				else 
					this.Write("[Key]");

				this.WriteLine("");
				isKey = true;
            }
			else if (Model.ForceAnnotations || column.Name.Contains(" ")) {
				//
				// In case is a simple field with spaces in the name.
				//
				this.Write("[Column(FieldName=\"" + column.Name + "\")]");
				this.WriteLine("");
			}


			if ( column.IsForeignKey && !Model.NoLazyLoad )
			{
				foreach ( var foreignColumn in column.ForeignKeys )
                {
					if (!isKey) {
						this.WriteLine("");
					}
						
					this.Write("[Association(FieldName=\"" + column.Name + "\", OtherKey = \"" + foreignColumn.ReferencedColumnName + "\")]");
					this.WriteLine("");

					this.Write("public " );	
					this.Write("virtual " );	
					this.Write(foreignColumn.ReferencedTableName.Replace(" ", ""));
					this.Write(" " );	
					this.Write(column.Name.Replace(" ", ""));
				}
            }
			else 
			{
				this.Write("public " );
				switch (column.DataType) 
				{
				
					case "bit":
						this.Write("Boolean");
						break;

					case "bigint":
						this.Write("long");
						break;

					case "smallint":
						this.Write("int");
						break;

					case "real":
					case "money":
						this.Write("Double");
						break;

					case "datetime":
						this.Write("DateTime");
						break;
					
					case "nchar":
					case "ntext":
					case "nvarchar":
					case "varchar":
						this.Write("String");
						break;

					case "timestamp":
					case "image":
						this.Write("Byte[]");
						break;
				
					default: 
						this.Write(column.DataType.ToString());
						break;
				}

				this.Write(" ");
				this.Write(column.Name.Replace(" ", ""));
            }
			
			this.Write(" { get; set; }");
			this.WriteLine("");
		}
		this.PopIndent();
		this.WriteLine("    ");
#>

	}	
	#pragma warning restore 1591
}